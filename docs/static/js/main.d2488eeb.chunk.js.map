{"version":3,"sources":["components/Filter.js","components/PokemonCard.js","components/PokemonList.js","components/App.js","serviceWorker.js","index.js"],"names":["Filter","_this$props","this","props","handleInput","inputState","react_default","a","createElement","className","htmlFor","onChange","id","type","value","placeholder","Component","PokemonCard","name","img","types","num","src","alt","map","index","key","PokemonList","listToShow","pokeList","filterList","length","console","log","sort","b","pokemon","components_PokemonCard","sprites","front_default","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","input","fetchPokemonList","bind","assertThisInitialized","filterCharactersList","_this2","pokeArrayData","i","fetch","then","response","json","data","push","setState","catch","error","message","event","target","filteredByName","filter","character","toLowerCase","includes","_this$state","components_Filter","components_PokemonList","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d2488eeb.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport '../stylesheets/Filter.css';\n\nclass Filter extends Component {\n  render() {\n    const {\n      handleInput,\n      inputState,\n    } = this.props;\n\n    return (\n      <form className=\"form\">\n        <label\n          htmlFor=\"buscador\"\n          className='form__title'>\n          Buscador de Pokemons\n          </label>\n        <input\n          onChange={handleInput}\n          id=\"buscador\"\n          type=\"text\"\n          value={inputState}\n          placeholder='Filtra pokemons por nombre...'\n          className='form__input'\n        />\n      </form>\n    );\n  }\n}\n\nexport default Filter;\n\nFilter.propTypes = {\n  handleInput: PropTypes.func.isRequired,\n  inputState: PropTypes.string.isRequired,\n};","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport '../stylesheets/PokemonCard.css';\n\nclass PokemonCard extends Component {\n  render() {\n    const {\n      name,\n      img,\n      types,\n      num,\n    } = this.props;\n    return (\n      <div className='pokemon__card'>\n        <div className=\"image__container\">\n          <img\n            className='pokemon__card-image'\n            src={img}\n            alt={name}\n          />\n          <span className='pokemon__card-number'>ID/{num}</span>\n        </div>\n        <div className=\"pokemon__card-data\">\n          <h2 className='data__name'>\n            {name}\n          </h2>\n          <ul className='data__types'>\n            {types.map(function (type, index) {\n              return (\n                <li\n                  className='data__types-type'\n                  key={index}\n                >\n                  {type.type.name}\n                </li>\n              )\n            })}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PokemonCard;\n\nPokemonCard.propTypes = {\n  name: PropTypes.string,\n  img: PropTypes.string,\n  types: PropTypes.array,\n  num: PropTypes.number,\n};","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport PokemonCard from './PokemonCard';\nimport '../stylesheets/PokemonList.css';\n\nclass PokemonList extends Component {\n  render() {\n    const {\n      pokeList,\n      filterList,\n    } = this.props;\n\n    let listToShow;\n\n\t\tif (filterList.length === 0) {\n\t\t\tlistToShow = pokeList\n\t\t} else {\n\t\t\tlistToShow = filterList\n\t\t}\n    console.log('lista', listToShow)\n    if(pokeList.length === 0) {\n      return (\n        <p className='loading'>Loading</p>\n      )\n    } else {\n      return(\n        <ul className='pokemon__list' >\n\t\t\t\t{listToShow.sort((a, b) => a.id - b.id).map((pokemon, index) =>\n            <li \n              className='pokemon__list-element'\n              key={index}>\n\t\t\t\t\t\t\t\t<PokemonCard\n                  name={pokemon.name}\n                  types={pokemon.types}\n                  img={pokemon.sprites.front_default}\n                  num={pokemon.id}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</li>\n\t\t\t\t)}\n\t\t\t</ul>\n\n        )\n    }\n  }\n}\n \nexport default PokemonList;\n\nPokemonList.propTypes = {\n  pokeList: PropTypes.array,\n  filterList: PropTypes.array,\n};","import React, { Component } from 'react';\nimport Filter from './Filter';\nimport PokemonList from './PokemonList';\nimport '../stylesheets/App.css';\n\nconst URL = 'https://pokeapi.co/api/v2/pokemon/';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pokeList: [],\n      filterList: [],\n      input: '',\n    }\n\n    this.fetchPokemonList = this.fetchPokemonList.bind(this);\n    this.handleInput = this.handleInput.bind(this);\n    this.filterCharactersList = this.filterCharactersList.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchPokemonList();\n  }\n\n  fetchPokemonList() {\n    const pokeArrayData =[];\n    for(let i = 1; i < 26; i++) {\n      fetch(URL + i + '/')\n      .then(response => response.json())\n      .then(data => {\n        pokeArrayData.push(data);\n        this.setState({\n          pokeList: pokeArrayData\n        })\n        //console.log('pokeList',this.state.pokeList)\n      })\n      .catch(error => {\n        console.log('Hubo un problema con la peticiÃ³n: ' + error.message)\n    })\n    }\n  }\n\n  handleInput(event) {\n    this.setState({\n      input: event.target.value,\n    }, this.filterCharactersList)\n  }\n\n  filterCharactersList() {\n    const input = this.state.input;\n    const pokeList = this.state.pokeList;\n    const filteredByName = pokeList.filter((character) =>\n      character.name.toLowerCase().includes(input.toLowerCase())\n    )\n    this.setState({\n      filterList: filteredByName,\n    })\n  }\n\n  render() {\n    //console.log('results', this.state.pokeList)\n    const {\n      pokeList,\n      filterList,\n      input,\n    } = this.state;\n\n    return (\n      <main>\n        <Filter\n          handleInput={this.handleInput}\n          inputState={input}\n        />\n        <PokemonList\n          pokeList={pokeList}\n          filterList={filterList}\n          input={input}\n        />\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}